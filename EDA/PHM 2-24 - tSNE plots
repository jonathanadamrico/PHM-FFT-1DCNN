{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6b44b016",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:00:07.753475Z",
     "iopub.status.busy": "2024-06-12T12:00:07.753076Z",
     "iopub.status.idle": "2024-06-12T12:00:24.753099Z",
     "shell.execute_reply": "2024-06-12T12:00:24.751458Z"
    },
    "papermill": {
     "duration": 17.01197,
     "end_time": "2024-06-12T12:00:24.756114",
     "exception": false,
     "start_time": "2024-06-12T12:00:07.744144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!pip install -qU tsfel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c2e761c1",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-12T12:00:24.773302Z",
     "iopub.status.busy": "2024-06-12T12:00:24.772847Z",
     "iopub.status.idle": "2024-06-12T12:00:28.009278Z",
     "shell.execute_reply": "2024-06-12T12:00:28.008052Z"
    },
    "papermill": {
     "duration": 3.24835,
     "end_time": "2024-06-12T12:00:28.012136",
     "exception": false,
     "start_time": "2024-06-12T12:00:24.763786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "import tsfel\n",
    "\n",
    "from sklearn.manifold import TSNE\n",
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fa65c8b",
   "metadata": {
    "papermill": {
     "duration": 0.006273,
     "end_time": "2024-06-12T12:00:28.025193",
     "exception": false,
     "start_time": "2024-06-12T12:00:28.018920",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrieve data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b6a80ee5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:00:28.040017Z",
     "iopub.status.busy": "2024-06-12T12:00:28.039456Z",
     "iopub.status.idle": "2024-06-12T12:00:28.047480Z",
     "shell.execute_reply": "2024-06-12T12:00:28.046351Z"
    },
    "papermill": {
     "duration": 0.01805,
     "end_time": "2024-06-12T12:00:28.049710",
     "exception": false,
     "start_time": "2024-06-12T12:00:28.031660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "TRAIN_DIR = \"/kaggle/input/ieee-phm-data-challenge-beijing-2024/Data_Pre Stage/Data_Pre Stage/Training data/Training data\"\n",
    "TEST_DIR = \"/kaggle/input/ieee-phm-data-challenge-beijing-2024/Data_Pre Stage/Data_Pre Stage/Test data/Test data\"\n",
    "\n",
    "component_fault = {\n",
    "\"motor\": [\"TYPE1\",\"TYPE2\",\"TYPE3\",\"TYPE4\"],\n",
    "\"gearbox\": [\"TYPE5\",\"TYPE6\",\"TYPE7\",\"TYPE8\",\"TYPE9\",\"TYPE10\",\"TYPE11\",\"TYPE12\"],\n",
    "\"leftaxlebox\": [\"TYPE13\",\"TYPE14\",\"TYPE15\",\"TYPE16\"],\n",
    "\"rightaxlebox\": []\n",
    "}\n",
    "\n",
    "component_channels = {\n",
    "    \"motor\":[\"CH1\",\"CH2\",\"CH3\",\"CH4\",\"CH5\",\"CH6\",\"CH7\",\"CH8\",\"CH9\"],\n",
    "    \"gearbox\":[\"CH10\",\"CH11\",\"CH12\",\"CH13\",\"CH14\",\"CH15\"],\n",
    "    \"leftaxlebox\":[\"CH16\",\"CH17\",\"CH18\"],\n",
    "    \"rightaxlebox\":[\"CH19\",\"CH20\",\"CH21\"]\n",
    "}\n",
    "\n",
    "components = component_channels.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3be34b41",
   "metadata": {
    "papermill": {
     "duration": 0.006191,
     "end_time": "2024-06-12T12:00:28.062548",
     "exception": false,
     "start_time": "2024-06-12T12:00:28.056357",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Extract features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9211fa0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:00:28.077801Z",
     "iopub.status.busy": "2024-06-12T12:00:28.076815Z",
     "iopub.status.idle": "2024-06-12T12:00:28.085399Z",
     "shell.execute_reply": "2024-06-12T12:00:28.084249Z"
    },
    "papermill": {
     "duration": 0.018688,
     "end_time": "2024-06-12T12:00:28.087771",
     "exception": false,
     "start_time": "2024-06-12T12:00:28.069083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def extract_features_tsfel(df_, fs=64000):\n",
    "    df = df_.copy()\n",
    "    '''feat_df = pd.DataFrame()\n",
    "    for col in df.columns:\n",
    "        f0 = []\n",
    "        f1 = []\n",
    "        f2 = []\n",
    "        f3 = []\n",
    "        for n in range(0, int(len(df)/fs)):\n",
    "            X = df.loc[fs*n:fs*n+fs, col]\n",
    "            f0.append(tsfel.feature_extraction.features.calc_mean(X))\n",
    "            f1.append(tsfel.feature_extraction.features.calc_std(X))\n",
    "            f2.append(tsfel.feature_extraction.features.max_power_spectrum(X, fs))\n",
    "            f3.append(tsfel.feature_extraction.features.fundamental_frequency(X, fs))\n",
    "    \n",
    "        feat_df[f'{col}_calc_mean'] = f0  \n",
    "        feat_df[f'{col}_calc_std'] = f1    \n",
    "        feat_df[f'{col}_max_power_spectrum'] = f2    \n",
    "        feat_df[f'{col}_fundamental_frequency'] = f3  \n",
    "    '''\n",
    "    #cfg = tsfel.get_features_by_domain()  #statistical, temporal, spectral, fractal\n",
    "    cfg = tsfel.get_features_by_domain(\"statistical\")\n",
    "    cfg_temporal = tsfel.get_features_by_domain(\"temporal\")\n",
    "    cfg_spectral = tsfel.get_features_by_domain(\"spectral\") # takes too long to run\n",
    "    cfg_fractal = tsfel.get_features_by_domain(\"fractal\") # takes too long to run\n",
    "    cfg.update(cfg_temporal)\n",
    "        \n",
    "    # Extract features\n",
    "    feat_df = tsfel.time_series_features_extractor(cfg, df, fs=fs, verbose=0, window_size=fs)\n",
    "    \n",
    "    return feat_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c7121eba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:00:28.102762Z",
     "iopub.status.busy": "2024-06-12T12:00:28.102366Z",
     "iopub.status.idle": "2024-06-12T12:11:17.956392Z",
     "shell.execute_reply": "2024-06-12T12:11:17.954520Z"
    },
    "papermill": {
     "duration": 649.864943,
     "end_time": "2024-06-12T12:11:17.959375",
     "exception": false,
     "start_time": "2024-06-12T12:00:28.094432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "82218ab2f21344898fb0f369f73937da",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/17 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b3465231771d417392cf70f28fb68768",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/17 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4080b89218604b46a730dd6dd814c9f2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/17 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "              <p>\n",
       "                  Progress: 0% Complete\n",
       "              <p/>\n",
       "              <progress\n",
       "                  value='0'\n",
       "                  max='10',\n",
       "                  style='width: 25%',\n",
       "              >\n",
       "                  0\n",
       "              </progress>\n",
       "\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "df = pd.DataFrame()\n",
    "for n_sample in range(1,4):\n",
    "    sample_n = f\"Sample{n_sample}\"\n",
    "    for n_fault_type in tqdm(range(0,17)):\n",
    "        fault_type = f\"TYPE{n_fault_type}\"\n",
    "        feat_df = pd.DataFrame()\n",
    "        for component in components:\n",
    "            data_df = pd.read_csv(f\"{TRAIN_DIR}/{fault_type}/{fault_type}/{sample_n}/data_{component}.csv\")\n",
    "            feat_df = pd.concat([feat_df, data_df], axis=1)\n",
    "        temp_df = extract_features_tsfel(feat_df, fs=64000)\n",
    "        temp_df['label'] = fault_type\n",
    "        df = pd.concat([df, temp_df])\n",
    "    \n",
    "    \n",
    "# From test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "faa92fcd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:11:17.995990Z",
     "iopub.status.busy": "2024-06-12T12:11:17.995501Z",
     "iopub.status.idle": "2024-06-12T12:11:18.041262Z",
     "shell.execute_reply": "2024-06-12T12:11:18.040008Z"
    },
    "papermill": {
     "duration": 0.067523,
     "end_time": "2024-06-12T12:11:18.043774",
     "exception": false,
     "start_time": "2024-06-12T12:11:17.976251",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CH10_Absolute energy</th>\n",
       "      <th>CH10_Area under the curve</th>\n",
       "      <th>CH10_Autocorrelation</th>\n",
       "      <th>CH10_Average power</th>\n",
       "      <th>CH10_Centroid</th>\n",
       "      <th>CH10_ECDF Percentile Count_0</th>\n",
       "      <th>CH10_ECDF Percentile Count_1</th>\n",
       "      <th>CH10_ECDF Percentile_0</th>\n",
       "      <th>CH10_ECDF Percentile_1</th>\n",
       "      <th>CH10_ECDF_0</th>\n",
       "      <th>...</th>\n",
       "      <th>CH9_Positive turning points</th>\n",
       "      <th>CH9_Root mean square</th>\n",
       "      <th>CH9_Signal distance</th>\n",
       "      <th>CH9_Skewness</th>\n",
       "      <th>CH9_Slope</th>\n",
       "      <th>CH9_Standard deviation</th>\n",
       "      <th>CH9_Sum absolute diff</th>\n",
       "      <th>CH9_Variance</th>\n",
       "      <th>CH9_Zero crossing rate</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5944.829087</td>\n",
       "      <td>0.234482</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5944.921977</td>\n",
       "      <td>0.492534</td>\n",
       "      <td>12800.0</td>\n",
       "      <td>51200.0</td>\n",
       "      <td>-0.252031</td>\n",
       "      <td>0.244730</td>\n",
       "      <td>0.000016</td>\n",
       "      <td>...</td>\n",
       "      <td>18085.0</td>\n",
       "      <td>20.678516</td>\n",
       "      <td>77591.898807</td>\n",
       "      <td>-0.035670</td>\n",
       "      <td>1.944315e-07</td>\n",
       "      <td>20.672507</td>\n",
       "      <td>36433.578551</td>\n",
       "      <td>427.352566</td>\n",
       "      <td>188.0</td>\n",
       "      <td>TYPE0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5992.688438</td>\n",
       "      <td>0.236848</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5992.782076</td>\n",
       "      <td>0.491767</td>\n",
       "      <td>12800.0</td>\n",
       "      <td>51200.0</td>\n",
       "      <td>-0.256250</td>\n",
       "      <td>0.245241</td>\n",
       "      <td>0.000016</td>\n",
       "      <td>...</td>\n",
       "      <td>17771.0</td>\n",
       "      <td>20.690438</td>\n",
       "      <td>76339.024089</td>\n",
       "      <td>0.033314</td>\n",
       "      <td>5.205119e-06</td>\n",
       "      <td>20.687121</td>\n",
       "      <td>34493.012358</td>\n",
       "      <td>427.956965</td>\n",
       "      <td>191.0</td>\n",
       "      <td>TYPE0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6129.160432</td>\n",
       "      <td>0.236860</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6129.256202</td>\n",
       "      <td>0.497683</td>\n",
       "      <td>12800.0</td>\n",
       "      <td>51200.0</td>\n",
       "      <td>-0.254219</td>\n",
       "      <td>0.245412</td>\n",
       "      <td>0.000016</td>\n",
       "      <td>...</td>\n",
       "      <td>18295.0</td>\n",
       "      <td>20.718736</td>\n",
       "      <td>78103.605597</td>\n",
       "      <td>-0.013938</td>\n",
       "      <td>-8.979192e-06</td>\n",
       "      <td>20.716330</td>\n",
       "      <td>37215.009375</td>\n",
       "      <td>429.166341</td>\n",
       "      <td>191.0</td>\n",
       "      <td>TYPE0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5982.176871</td>\n",
       "      <td>0.235354</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5982.270344</td>\n",
       "      <td>0.496801</td>\n",
       "      <td>12800.0</td>\n",
       "      <td>51200.0</td>\n",
       "      <td>-0.253963</td>\n",
       "      <td>0.243111</td>\n",
       "      <td>0.000016</td>\n",
       "      <td>...</td>\n",
       "      <td>17507.0</td>\n",
       "      <td>20.744359</td>\n",
       "      <td>75900.175593</td>\n",
       "      <td>0.005338</td>\n",
       "      <td>9.594669e-06</td>\n",
       "      <td>20.744291</td>\n",
       "      <td>33791.887074</td>\n",
       "      <td>430.325598</td>\n",
       "      <td>189.0</td>\n",
       "      <td>TYPE0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6030.620797</td>\n",
       "      <td>0.234816</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6030.715027</td>\n",
       "      <td>0.503484</td>\n",
       "      <td>12800.0</td>\n",
       "      <td>51200.0</td>\n",
       "      <td>-0.250838</td>\n",
       "      <td>0.240966</td>\n",
       "      <td>0.000016</td>\n",
       "      <td>...</td>\n",
       "      <td>17637.0</td>\n",
       "      <td>20.771101</td>\n",
       "      <td>76482.631858</td>\n",
       "      <td>0.008923</td>\n",
       "      <td>-8.849102e-06</td>\n",
       "      <td>20.771038</td>\n",
       "      <td>34673.209091</td>\n",
       "      <td>431.436038</td>\n",
       "      <td>207.0</td>\n",
       "      <td>TYPE0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 1135 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   CH10_Absolute energy  CH10_Area under the curve  CH10_Autocorrelation  \\\n",
       "0           5944.829087                   0.234482                   4.0   \n",
       "1           5992.688438                   0.236848                   4.0   \n",
       "2           6129.160432                   0.236860                   4.0   \n",
       "3           5982.176871                   0.235354                   4.0   \n",
       "4           6030.620797                   0.234816                   4.0   \n",
       "\n",
       "   CH10_Average power  CH10_Centroid  CH10_ECDF Percentile Count_0  \\\n",
       "0         5944.921977       0.492534                       12800.0   \n",
       "1         5992.782076       0.491767                       12800.0   \n",
       "2         6129.256202       0.497683                       12800.0   \n",
       "3         5982.270344       0.496801                       12800.0   \n",
       "4         6030.715027       0.503484                       12800.0   \n",
       "\n",
       "   CH10_ECDF Percentile Count_1  CH10_ECDF Percentile_0  \\\n",
       "0                       51200.0               -0.252031   \n",
       "1                       51200.0               -0.256250   \n",
       "2                       51200.0               -0.254219   \n",
       "3                       51200.0               -0.253963   \n",
       "4                       51200.0               -0.250838   \n",
       "\n",
       "   CH10_ECDF Percentile_1  CH10_ECDF_0  ...  CH9_Positive turning points  \\\n",
       "0                0.244730     0.000016  ...                      18085.0   \n",
       "1                0.245241     0.000016  ...                      17771.0   \n",
       "2                0.245412     0.000016  ...                      18295.0   \n",
       "3                0.243111     0.000016  ...                      17507.0   \n",
       "4                0.240966     0.000016  ...                      17637.0   \n",
       "\n",
       "   CH9_Root mean square  CH9_Signal distance  CH9_Skewness     CH9_Slope  \\\n",
       "0             20.678516         77591.898807     -0.035670  1.944315e-07   \n",
       "1             20.690438         76339.024089      0.033314  5.205119e-06   \n",
       "2             20.718736         78103.605597     -0.013938 -8.979192e-06   \n",
       "3             20.744359         75900.175593      0.005338  9.594669e-06   \n",
       "4             20.771101         76482.631858      0.008923 -8.849102e-06   \n",
       "\n",
       "   CH9_Standard deviation  CH9_Sum absolute diff  CH9_Variance  \\\n",
       "0               20.672507           36433.578551    427.352566   \n",
       "1               20.687121           34493.012358    427.956965   \n",
       "2               20.716330           37215.009375    429.166341   \n",
       "3               20.744291           33791.887074    430.325598   \n",
       "4               20.771038           34673.209091    431.436038   \n",
       "\n",
       "   CH9_Zero crossing rate  label  \n",
       "0                   188.0  TYPE0  \n",
       "1                   191.0  TYPE0  \n",
       "2                   191.0  TYPE0  \n",
       "3                   189.0  TYPE0  \n",
       "4                   207.0  TYPE0  \n",
       "\n",
       "[5 rows x 1135 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ = df.copy()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "56d6232c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:11:18.079349Z",
     "iopub.status.busy": "2024-06-12T12:11:18.078922Z",
     "iopub.status.idle": "2024-06-12T12:11:18.335980Z",
     "shell.execute_reply": "2024-06-12T12:11:18.334833Z"
    },
    "papermill": {
     "duration": 0.278284,
     "end_time": "2024-06-12T12:11:18.338984",
     "exception": false,
     "start_time": "2024-06-12T12:11:18.060700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler = MinMaxScaler()\n",
    "cols = [col for col in df_.columns if col not in ('label')]\n",
    "df[cols] = scaler.fit_transform(df_[cols])\n",
    "\n",
    "y = df['label'].to_numpy()\n",
    "X = df[cols].to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2d8c70f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:11:18.375845Z",
     "iopub.status.busy": "2024-06-12T12:11:18.374814Z",
     "iopub.status.idle": "2024-06-12T12:11:18.418829Z",
     "shell.execute_reply": "2024-06-12T12:11:18.417562Z"
    },
    "papermill": {
     "duration": 0.064768,
     "end_time": "2024-06-12T12:11:18.421214",
     "exception": false,
     "start_time": "2024-06-12T12:11:18.356446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CH10_Absolute energy</th>\n",
       "      <th>CH10_Area under the curve</th>\n",
       "      <th>CH10_Autocorrelation</th>\n",
       "      <th>CH10_Average power</th>\n",
       "      <th>CH10_Centroid</th>\n",
       "      <th>CH10_ECDF Percentile Count_0</th>\n",
       "      <th>CH10_ECDF Percentile Count_1</th>\n",
       "      <th>CH10_ECDF Percentile_0</th>\n",
       "      <th>CH10_ECDF Percentile_1</th>\n",
       "      <th>CH10_ECDF_0</th>\n",
       "      <th>...</th>\n",
       "      <th>CH9_Positive turning points</th>\n",
       "      <th>CH9_Root mean square</th>\n",
       "      <th>CH9_Signal distance</th>\n",
       "      <th>CH9_Skewness</th>\n",
       "      <th>CH9_Slope</th>\n",
       "      <th>CH9_Standard deviation</th>\n",
       "      <th>CH9_Sum absolute diff</th>\n",
       "      <th>CH9_Variance</th>\n",
       "      <th>CH9_Zero crossing rate</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.008449</td>\n",
       "      <td>0.054345</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.008449</td>\n",
       "      <td>0.330260</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.945473</td>\n",
       "      <td>0.058464</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.740761</td>\n",
       "      <td>0.044500</td>\n",
       "      <td>0.290217</td>\n",
       "      <td>0.066428</td>\n",
       "      <td>0.510846</td>\n",
       "      <td>0.044278</td>\n",
       "      <td>0.283915</td>\n",
       "      <td>0.027183</td>\n",
       "      <td>0.488550</td>\n",
       "      <td>TYPE0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.008544</td>\n",
       "      <td>0.055531</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.008544</td>\n",
       "      <td>0.319205</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.943412</td>\n",
       "      <td>0.058713</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.712457</td>\n",
       "      <td>0.044951</td>\n",
       "      <td>0.210298</td>\n",
       "      <td>0.897939</td>\n",
       "      <td>0.560604</td>\n",
       "      <td>0.044831</td>\n",
       "      <td>0.202733</td>\n",
       "      <td>0.027532</td>\n",
       "      <td>0.511450</td>\n",
       "      <td>TYPE0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.008813</td>\n",
       "      <td>0.055537</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.008813</td>\n",
       "      <td>0.404458</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.944404</td>\n",
       "      <td>0.058796</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.759690</td>\n",
       "      <td>0.046021</td>\n",
       "      <td>0.322858</td>\n",
       "      <td>0.328376</td>\n",
       "      <td>0.419748</td>\n",
       "      <td>0.045936</td>\n",
       "      <td>0.316606</td>\n",
       "      <td>0.028231</td>\n",
       "      <td>0.511450</td>\n",
       "      <td>TYPE0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.008523</td>\n",
       "      <td>0.054782</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.008523</td>\n",
       "      <td>0.391745</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.944529</td>\n",
       "      <td>0.057676</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.688661</td>\n",
       "      <td>0.046991</td>\n",
       "      <td>0.182304</td>\n",
       "      <td>0.560718</td>\n",
       "      <td>0.604194</td>\n",
       "      <td>0.046993</td>\n",
       "      <td>0.173402</td>\n",
       "      <td>0.028902</td>\n",
       "      <td>0.496183</td>\n",
       "      <td>TYPE0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.008619</td>\n",
       "      <td>0.054513</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.008619</td>\n",
       "      <td>0.488057</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.946057</td>\n",
       "      <td>0.056631</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.700379</td>\n",
       "      <td>0.048002</td>\n",
       "      <td>0.219458</td>\n",
       "      <td>0.603937</td>\n",
       "      <td>0.421039</td>\n",
       "      <td>0.048005</td>\n",
       "      <td>0.210272</td>\n",
       "      <td>0.029543</td>\n",
       "      <td>0.633588</td>\n",
       "      <td>TYPE0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.349595</td>\n",
       "      <td>0.599223</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.349595</td>\n",
       "      <td>0.470069</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.370925</td>\n",
       "      <td>0.630519</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.505138</td>\n",
       "      <td>0.352792</td>\n",
       "      <td>0.672283</td>\n",
       "      <td>0.542303</td>\n",
       "      <td>0.319267</td>\n",
       "      <td>0.352795</td>\n",
       "      <td>0.678186</td>\n",
       "      <td>0.260556</td>\n",
       "      <td>0.251908</td>\n",
       "      <td>TYPE16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.351883</td>\n",
       "      <td>0.602286</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.351883</td>\n",
       "      <td>0.326622</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.364288</td>\n",
       "      <td>0.634226</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.650261</td>\n",
       "      <td>0.351712</td>\n",
       "      <td>0.908661</td>\n",
       "      <td>0.468369</td>\n",
       "      <td>0.373212</td>\n",
       "      <td>0.351708</td>\n",
       "      <td>0.910344</td>\n",
       "      <td>0.259598</td>\n",
       "      <td>0.244275</td>\n",
       "      <td>TYPE16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.362401</td>\n",
       "      <td>0.611729</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.362401</td>\n",
       "      <td>0.488704</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.358199</td>\n",
       "      <td>0.644096</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.624031</td>\n",
       "      <td>0.348239</td>\n",
       "      <td>0.874660</td>\n",
       "      <td>0.519757</td>\n",
       "      <td>0.514163</td>\n",
       "      <td>0.348230</td>\n",
       "      <td>0.878429</td>\n",
       "      <td>0.256542</td>\n",
       "      <td>0.198473</td>\n",
       "      <td>TYPE16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.357458</td>\n",
       "      <td>0.604387</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.357458</td>\n",
       "      <td>0.422619</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.363829</td>\n",
       "      <td>0.628396</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.398053</td>\n",
       "      <td>0.345516</td>\n",
       "      <td>0.523573</td>\n",
       "      <td>0.468410</td>\n",
       "      <td>0.656133</td>\n",
       "      <td>0.345515</td>\n",
       "      <td>0.528123</td>\n",
       "      <td>0.254163</td>\n",
       "      <td>0.152672</td>\n",
       "      <td>TYPE16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.360261</td>\n",
       "      <td>0.609866</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.360261</td>\n",
       "      <td>0.476861</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.355387</td>\n",
       "      <td>0.637304</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.586714</td>\n",
       "      <td>0.344976</td>\n",
       "      <td>0.798421</td>\n",
       "      <td>0.550684</td>\n",
       "      <td>0.685598</td>\n",
       "      <td>0.344979</td>\n",
       "      <td>0.804199</td>\n",
       "      <td>0.253694</td>\n",
       "      <td>0.175573</td>\n",
       "      <td>TYPE16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>510 rows × 1135 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    CH10_Absolute energy  CH10_Area under the curve  CH10_Autocorrelation  \\\n",
       "0               0.008449                   0.054345                   0.5   \n",
       "1               0.008544                   0.055531                   0.5   \n",
       "2               0.008813                   0.055537                   0.5   \n",
       "3               0.008523                   0.054782                   0.5   \n",
       "4               0.008619                   0.054513                   0.5   \n",
       "..                   ...                        ...                   ...   \n",
       "5               0.349595                   0.599223                   0.5   \n",
       "6               0.351883                   0.602286                   0.5   \n",
       "7               0.362401                   0.611729                   0.5   \n",
       "8               0.357458                   0.604387                   0.5   \n",
       "9               0.360261                   0.609866                   0.5   \n",
       "\n",
       "    CH10_Average power  CH10_Centroid  CH10_ECDF Percentile Count_0  \\\n",
       "0             0.008449       0.330260                           0.0   \n",
       "1             0.008544       0.319205                           0.0   \n",
       "2             0.008813       0.404458                           0.0   \n",
       "3             0.008523       0.391745                           0.0   \n",
       "4             0.008619       0.488057                           0.0   \n",
       "..                 ...            ...                           ...   \n",
       "5             0.349595       0.470069                           0.0   \n",
       "6             0.351883       0.326622                           0.0   \n",
       "7             0.362401       0.488704                           0.0   \n",
       "8             0.357458       0.422619                           0.0   \n",
       "9             0.360261       0.476861                           0.0   \n",
       "\n",
       "    CH10_ECDF Percentile Count_1  CH10_ECDF Percentile_0  \\\n",
       "0                            0.0                0.945473   \n",
       "1                            0.0                0.943412   \n",
       "2                            0.0                0.944404   \n",
       "3                            0.0                0.944529   \n",
       "4                            0.0                0.946057   \n",
       "..                           ...                     ...   \n",
       "5                            0.0                0.370925   \n",
       "6                            0.0                0.364288   \n",
       "7                            0.0                0.358199   \n",
       "8                            0.0                0.363829   \n",
       "9                            0.0                0.355387   \n",
       "\n",
       "    CH10_ECDF Percentile_1  CH10_ECDF_0  ...  CH9_Positive turning points  \\\n",
       "0                 0.058464          0.0  ...                     0.740761   \n",
       "1                 0.058713          0.0  ...                     0.712457   \n",
       "2                 0.058796          0.0  ...                     0.759690   \n",
       "3                 0.057676          0.0  ...                     0.688661   \n",
       "4                 0.056631          0.0  ...                     0.700379   \n",
       "..                     ...          ...  ...                          ...   \n",
       "5                 0.630519          0.0  ...                     0.505138   \n",
       "6                 0.634226          0.0  ...                     0.650261   \n",
       "7                 0.644096          0.0  ...                     0.624031   \n",
       "8                 0.628396          0.0  ...                     0.398053   \n",
       "9                 0.637304          0.0  ...                     0.586714   \n",
       "\n",
       "    CH9_Root mean square  CH9_Signal distance  CH9_Skewness  CH9_Slope  \\\n",
       "0               0.044500             0.290217      0.066428   0.510846   \n",
       "1               0.044951             0.210298      0.897939   0.560604   \n",
       "2               0.046021             0.322858      0.328376   0.419748   \n",
       "3               0.046991             0.182304      0.560718   0.604194   \n",
       "4               0.048002             0.219458      0.603937   0.421039   \n",
       "..                   ...                  ...           ...        ...   \n",
       "5               0.352792             0.672283      0.542303   0.319267   \n",
       "6               0.351712             0.908661      0.468369   0.373212   \n",
       "7               0.348239             0.874660      0.519757   0.514163   \n",
       "8               0.345516             0.523573      0.468410   0.656133   \n",
       "9               0.344976             0.798421      0.550684   0.685598   \n",
       "\n",
       "    CH9_Standard deviation  CH9_Sum absolute diff  CH9_Variance  \\\n",
       "0                 0.044278               0.283915      0.027183   \n",
       "1                 0.044831               0.202733      0.027532   \n",
       "2                 0.045936               0.316606      0.028231   \n",
       "3                 0.046993               0.173402      0.028902   \n",
       "4                 0.048005               0.210272      0.029543   \n",
       "..                     ...                    ...           ...   \n",
       "5                 0.352795               0.678186      0.260556   \n",
       "6                 0.351708               0.910344      0.259598   \n",
       "7                 0.348230               0.878429      0.256542   \n",
       "8                 0.345515               0.528123      0.254163   \n",
       "9                 0.344979               0.804199      0.253694   \n",
       "\n",
       "    CH9_Zero crossing rate   label  \n",
       "0                 0.488550   TYPE0  \n",
       "1                 0.511450   TYPE0  \n",
       "2                 0.511450   TYPE0  \n",
       "3                 0.496183   TYPE0  \n",
       "4                 0.633588   TYPE0  \n",
       "..                     ...     ...  \n",
       "5                 0.251908  TYPE16  \n",
       "6                 0.244275  TYPE16  \n",
       "7                 0.198473  TYPE16  \n",
       "8                 0.152672  TYPE16  \n",
       "9                 0.175573  TYPE16  \n",
       "\n",
       "[510 rows x 1135 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09e9ff7e",
   "metadata": {
    "papermill": {
     "duration": 0.017254,
     "end_time": "2024-06-12T12:11:18.455990",
     "exception": false,
     "start_time": "2024-06-12T12:11:18.438736",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## tSNE plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "69445c5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:11:18.493180Z",
     "iopub.status.busy": "2024-06-12T12:11:18.492735Z",
     "iopub.status.idle": "2024-06-12T12:11:20.443489Z",
     "shell.execute_reply": "2024-06-12T12:11:20.442515Z"
    },
    "papermill": {
     "duration": 1.972332,
     "end_time": "2024-06-12T12:11:20.446090",
     "exception": false,
     "start_time": "2024-06-12T12:11:18.473758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 7.06 s, sys: 452 ms, total: 7.51 s\n",
      "Wall time: 1.94 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(510, 2)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "X_embedded = TSNE(n_components=2, \n",
    "                  learning_rate='auto', \n",
    "                  #method='exact',\n",
    "                  init='pca', \n",
    "                  #max_iter=500,\n",
    "                  #n_iter_without_progress=150,\n",
    "                  perplexity=6,\n",
    "                  random_state=42).fit_transform(X,y)\n",
    "X_embedded.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e582292d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:11:20.484982Z",
     "iopub.status.busy": "2024-06-12T12:11:20.484527Z",
     "iopub.status.idle": "2024-06-12T12:11:21.880973Z",
     "shell.execute_reply": "2024-06-12T12:11:21.879740Z"
    },
    "papermill": {
     "duration": 1.418894,
     "end_time": "2024-06-12T12:11:21.883675",
     "exception": false,
     "start_time": "2024-06-12T12:11:20.464781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dbb0f3b0b40c42ce98e49208625bf7c9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/17 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7c8b25edc880>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "colors = [\"darkgreen\",\"red\",\"green\",\"blue\",\"navy\",\"pink\",\"cyan\",\"magenta\",\"orange\",\n",
    "          \"gray\",\"brown\",\"darkviolet\",\"lime\",\"darkblue\",\"gold\",\"silver\",\"maroon\"\n",
    "         ]\n",
    "\n",
    "_, ax = plt.subplots(figsize=(10,6))\n",
    "for n_fault_type in tqdm(range(0,17)):\n",
    "    fault_type = f\"TYPE{n_fault_type}\"\n",
    "    ax.scatter(\n",
    "        *X_embedded[y==fault_type].T,\n",
    "        marker=f\"${n_fault_type}$\",\n",
    "        #color=plt.cm.RdPu_r(n_fault_type),\n",
    "        color=colors[n_fault_type-1],\n",
    "        alpha=0.8,\n",
    "        zorder=2,\n",
    "        label=' '\n",
    "              )\n",
    "    \n",
    "ax.legend(title=' ', bbox_to_anchor=(1.01, 1), loc='upper left', fontsize='small')\n",
    "#ax.axis('off')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e6473a07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:11:21.924477Z",
     "iopub.status.busy": "2024-06-12T12:11:21.924071Z",
     "iopub.status.idle": "2024-06-12T12:11:21.937256Z",
     "shell.execute_reply": "2024-06-12T12:11:21.936066Z"
    },
    "papermill": {
     "duration": 0.037644,
     "end_time": "2024-06-12T12:11:21.940511",
     "exception": false,
     "start_time": "2024-06-12T12:11:21.902867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'temporal': {'Area under the curve': {'complexity': 'log',\n",
       "   'description': 'Computes the area under the curve of the signal computed with trapezoid rule.',\n",
       "   'function': 'tsfel.auc',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Autocorrelation': {'complexity': 'linear',\n",
       "   'description': 'Calculates the first lag after the (1/e) crossing of the autocorrelation function (ACF).',\n",
       "   'function': 'tsfel.autocorr',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'inertial'},\n",
       "  'Centroid': {'complexity': 'constant',\n",
       "   'description': 'Computes the centroid along the time axis.',\n",
       "   'function': 'tsfel.calc_centroid',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Lempel-Ziv complexity': {'complexity': 'linear',\n",
       "   'description': \"Computes the Lempel-Ziv's (LZ) complexity index, normalized by the signal's length.\",\n",
       "   'function': 'tsfel.lempel_ziv',\n",
       "   'parameters': {'threshold': None},\n",
       "   'n_features': 1,\n",
       "   'use': 'no'},\n",
       "  'Mean absolute diff': {'complexity': 'constant',\n",
       "   'description': 'Computes mean absolute differences of the signal.',\n",
       "   'function': 'tsfel.mean_abs_diff',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Mean diff': {'complexity': 'constant',\n",
       "   'description': 'Computes mean of differences of the signal.',\n",
       "   'function': 'tsfel.mean_diff',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Median absolute diff': {'complexity': 'constant',\n",
       "   'description': 'Computes median absolute differences of the signal.',\n",
       "   'function': 'tsfel.median_abs_diff',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Median diff': {'complexity': 'constant',\n",
       "   'description': 'Computes median of differences of the signal.',\n",
       "   'function': 'tsfel.median_diff',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Negative turning points': {'complexity': 'constant',\n",
       "   'description': 'Computes number of negative turning points of the signal.',\n",
       "   'function': 'tsfel.negative_turning',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'emg'},\n",
       "  'Neighbourhood peaks': {'complexity': 'constant',\n",
       "   'description': 'Computes the number of peaks from a defined neighbourhood of the signal.',\n",
       "   'function': 'tsfel.neighbourhood_peaks',\n",
       "   'parameters': {'n': 10},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Positive turning points': {'complexity': 'constant',\n",
       "   'description': 'Computes number of positive turning points of the signal.',\n",
       "   'function': 'tsfel.positive_turning',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'emg'},\n",
       "  'Signal distance': {'complexity': 'constant',\n",
       "   'description': 'Computes signal traveled distance.',\n",
       "   'function': 'tsfel.distance',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Slope': {'complexity': 'log',\n",
       "   'description': 'Computes the slope of the signal by fitting a linear equation to the observed data.',\n",
       "   'function': 'tsfel.slope',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Sum absolute diff': {'complexity': 'constant',\n",
       "   'description': 'Computes sum of absolute differences of the signal.',\n",
       "   'function': 'tsfel.sum_abs_diff',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Zero crossing rate': {'complexity': 'constant',\n",
       "   'description': 'Computes Zero-crossing rate of the signal.',\n",
       "   'function': 'tsfel.zero_cross',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': ['audio', 'emg']}}}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tsfel.get_features_by_domain(\"temporal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "21ffc9ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:11:21.981221Z",
     "iopub.status.busy": "2024-06-12T12:11:21.980779Z",
     "iopub.status.idle": "2024-06-12T12:11:21.996472Z",
     "shell.execute_reply": "2024-06-12T12:11:21.995311Z"
    },
    "papermill": {
     "duration": 0.039119,
     "end_time": "2024-06-12T12:11:21.999119",
     "exception": false,
     "start_time": "2024-06-12T12:11:21.960000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'statistical': {'Absolute energy': {'complexity': 'log',\n",
       "   'description': 'Computes the absolute energy of the signal.',\n",
       "   'function': 'tsfel.abs_energy',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'audio'},\n",
       "  'Average power': {'complexity': 'constant',\n",
       "   'description': 'Computes the average power of the signal.',\n",
       "   'function': 'tsfel.average_power',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'audio'},\n",
       "  'ECDF': {'complexity': 'log',\n",
       "   'description': 'Computes the values of ECDF (empirical cumulative distribution function) along the time axis.',\n",
       "   'function': 'tsfel.ecdf',\n",
       "   'parameters': {'d': 10},\n",
       "   'n_features': 'd',\n",
       "   'use': 'yes'},\n",
       "  'ECDF Percentile': {'complexity': 'log',\n",
       "   'description': 'Determines the percentile value of the ECDF.',\n",
       "   'function': 'tsfel.ecdf_percentile',\n",
       "   'parameters': {'percentile': '[0.2, 0.8]'},\n",
       "   'n_features': 'percentile',\n",
       "   'use': 'yes'},\n",
       "  'ECDF Percentile Count': {'complexity': 'log',\n",
       "   'description': 'Determines the cumulative sum of samples that are less than the percentile.',\n",
       "   'function': 'tsfel.ecdf_percentile_count',\n",
       "   'parameters': {'percentile': '[0.2, 0.8]'},\n",
       "   'n_features': 'percentile',\n",
       "   'use': 'yes'},\n",
       "  'Entropy': {'complexity': 'log',\n",
       "   'description': 'Computes the entropy of the signal using the Shannon Entropy.',\n",
       "   'function': 'tsfel.entropy',\n",
       "   'parameters': {'prob': 'standard'},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'eeg'},\n",
       "  'Histogram': {'complexity': 'log',\n",
       "   'description': 'Computes histogram of the signal.',\n",
       "   'function': 'tsfel.hist',\n",
       "   'parameters': {'nbins': 10, 'r': 1},\n",
       "   'n_features': 'nbins',\n",
       "   'use': 'yes'},\n",
       "  'Interquartile range': {'complexity': 'constant',\n",
       "   'description': 'Computes interquartile range of the signal.',\n",
       "   'function': 'tsfel.interq_range',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Kurtosis': {'complexity': 'constant',\n",
       "   'description': 'Computes kurtosis of the signal.',\n",
       "   'function': 'tsfel.kurtosis',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Max': {'complexity': 'constant',\n",
       "   'description': 'Computes the maximum value of the signal.',\n",
       "   'function': 'tsfel.calc_max',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Mean': {'complexity': 'constant',\n",
       "   'description': 'Computes the mean value of the signal.',\n",
       "   'function': 'tsfel.calc_mean',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'inertial'},\n",
       "  'Mean absolute deviation': {'complexity': 'log',\n",
       "   'description': 'Computes mean absolute deviation of the signal.',\n",
       "   'function': 'tsfel.mean_abs_deviation',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Median': {'complexity': 'constant',\n",
       "   'description': 'Computes median of the signal.',\n",
       "   'function': 'tsfel.calc_median',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Median absolute deviation': {'complexity': 'constant',\n",
       "   'description': 'Computes median absolute deviation of the signal.',\n",
       "   'function': 'tsfel.median_abs_deviation',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Min': {'complexity': 'constant',\n",
       "   'description': 'Computes the minimum value of the signal.',\n",
       "   'function': 'tsfel.calc_min',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Peak to peak distance': {'complexity': 'constant',\n",
       "   'description': 'Computes the peak to peak distance.',\n",
       "   'function': 'tsfel.pk_pk_distance',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Root mean square': {'complexity': 'constant',\n",
       "   'description': 'Computes root mean square of the signal.',\n",
       "   'function': 'tsfel.rms',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': ['emg', 'inertial']},\n",
       "  'Skewness': {'complexity': 'constant',\n",
       "   'description': 'Computes skewness of the signal.',\n",
       "   'function': 'tsfel.skewness',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Standard deviation': {'complexity': 'constant',\n",
       "   'description': 'Computes standard deviation of the signal.',\n",
       "   'function': 'tsfel.calc_std',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Variance': {'complexity': 'constant',\n",
       "   'description': 'Computes variance of the signal.',\n",
       "   'function': 'tsfel.calc_var',\n",
       "   'parameters': '',\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'}}}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tsfel.get_features_by_domain(\"statistical\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "996d76e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:11:22.042106Z",
     "iopub.status.busy": "2024-06-12T12:11:22.041004Z",
     "iopub.status.idle": "2024-06-12T12:11:22.058596Z",
     "shell.execute_reply": "2024-06-12T12:11:22.057465Z"
    },
    "papermill": {
     "duration": 0.04182,
     "end_time": "2024-06-12T12:11:22.061510",
     "exception": false,
     "start_time": "2024-06-12T12:11:22.019690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'spectral': {'FFT mean coefficient': {'complexity': 'constant',\n",
       "   'description': 'Computes the mean value of each spectrogram frequency.',\n",
       "   'function': 'tsfel.fft_mean_coeff',\n",
       "   'parameters': {'fs': 100, 'nfreq': 256},\n",
       "   'n_features': 'nfreq',\n",
       "   'use': 'yes'},\n",
       "  'Fundamental frequency': {'complexity': 'log',\n",
       "   'description': 'Computes the fundamental frequency.',\n",
       "   'function': 'tsfel.fundamental_frequency',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Human range energy': {'complexity': 'log',\n",
       "   'description': 'Computes the human range energy ratio given by the ratio between the energy in frequency 0.6-2.5Hz and the whole energy band.',\n",
       "   'function': 'tsfel.human_range_energy',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'inertial'},\n",
       "  'LPCC': {'complexity': 'log',\n",
       "   'description': 'Computes the linear prediction cepstral coefficients.',\n",
       "   'function': 'tsfel.lpcc',\n",
       "   'parameters': {'n_coeff': 12},\n",
       "   'n_features': 'n_coeff',\n",
       "   'use': 'yes',\n",
       "   'tag': 'audio'},\n",
       "  'MFCC': {'complexity': 'constant',\n",
       "   'description': 'Computes the MEL cepstral coefficients.',\n",
       "   'function': 'tsfel.mfcc',\n",
       "   'parameters': {'cep_lifter': 22,\n",
       "    'fs': 100,\n",
       "    'nfft': 512,\n",
       "    'nfilt': 40,\n",
       "    'num_ceps': 12,\n",
       "    'pre_emphasis': 0.97},\n",
       "   'n_features': 'num_ceps',\n",
       "   'use': 'yes',\n",
       "   'tag': ['audio', 'emg']},\n",
       "  'Max power spectrum': {'complexity': 'log',\n",
       "   'description': 'Computes the maximum power spectrum density.',\n",
       "   'function': 'tsfel.max_power_spectrum',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Maximum frequency': {'complexity': 'log',\n",
       "   'description': 'Computes the maximum frequency.',\n",
       "   'function': 'tsfel.max_frequency',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Median frequency': {'complexity': 'log',\n",
       "   'description': 'Computes the median frequency.',\n",
       "   'function': 'tsfel.median_frequency',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Power bandwidth': {'complexity': 'log',\n",
       "   'description': 'Computes power spectrum density bandwidth of the signal.',\n",
       "   'function': 'tsfel.power_bandwidth',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Spectral centroid': {'complexity': 'linear',\n",
       "   'description': 'Computes the barycenter of the spectrum.',\n",
       "   'function': 'tsfel.spectral_centroid',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'audio'},\n",
       "  'Spectral decrease': {'complexity': 'log',\n",
       "   'description': 'Computes the amount of decreasing of the spectra amplitude.',\n",
       "   'function': 'tsfel.spectral_decrease',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Spectral distance': {'complexity': 'log',\n",
       "   'description': 'Computes the signal spectral distance.',\n",
       "   'function': 'tsfel.spectral_distance',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Spectral entropy': {'complexity': 'log',\n",
       "   'description': 'Computes the spectral entropy of the signal based on Fourier transform.',\n",
       "   'function': 'tsfel.spectral_entropy',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'eeg'},\n",
       "  'Spectral kurtosis': {'complexity': 'linear',\n",
       "   'description': 'Computes the flatness of a distribution around its mean value.',\n",
       "   'function': 'tsfel.spectral_kurtosis',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Spectral positive turning points': {'complexity': 'log',\n",
       "   'description': 'Computes number of positive turning points of the fft magnitude signal',\n",
       "   'function': 'tsfel.spectral_positive_turning',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Spectral roll-off': {'complexity': 'log',\n",
       "   'description': 'Computes the frequency where 95% of the signal magnitude is contained below of this value.',\n",
       "   'function': 'tsfel.spectral_roll_off',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'audio'},\n",
       "  'Spectral roll-on': {'complexity': 'log',\n",
       "   'description': 'Computes the frequency where 5% of the signal magnitude is contained below of this value.',\n",
       "   'function': 'tsfel.spectral_roll_on',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Spectral skewness': {'complexity': 'linear',\n",
       "   'description': 'Computes the asymmetry of a distribution around its mean value.',\n",
       "   'function': 'tsfel.spectral_skewness',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Spectral slope': {'complexity': 'log',\n",
       "   'description': 'Computes the spectral slope, obtained by linear regression of the spectral amplitude.',\n",
       "   'function': 'tsfel.spectral_slope',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Spectral spread': {'complexity': 'linear',\n",
       "   'description': 'Computes the spread of the spectrum around its mean value.',\n",
       "   'function': 'tsfel.spectral_spread',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Spectral variation': {'complexity': 'log',\n",
       "   'description': 'Computes the amount of variation of the spectrum along time.',\n",
       "   'function': 'tsfel.spectral_variation',\n",
       "   'parameters': {'fs': 100},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes'},\n",
       "  'Wavelet absolute mean': {'complexity': 'linear',\n",
       "   'description': 'Computes CWT absolute mean value of each wavelet scale.',\n",
       "   'function': 'tsfel.wavelet_abs_mean',\n",
       "   'parameters': {'function': 'scipy.signal.ricker',\n",
       "    'widths': 'np.arange(1,10)'},\n",
       "   'n_features': 'widths',\n",
       "   'use': 'yes',\n",
       "   'tag': ['eeg', 'ecg']},\n",
       "  'Wavelet energy': {'complexity': 'linear',\n",
       "   'description': 'Computes CWT energy of each wavelet scale.',\n",
       "   'function': 'tsfel.wavelet_energy',\n",
       "   'parameters': {'function': 'scipy.signal.ricker',\n",
       "    'widths': 'np.arange(1,10)'},\n",
       "   'n_features': 'widths',\n",
       "   'use': 'yes',\n",
       "   'tag': 'eeg'},\n",
       "  'Wavelet entropy': {'complexity': 'linear',\n",
       "   'description': 'Computes CWT entropy of the signal.',\n",
       "   'function': 'tsfel.wavelet_entropy',\n",
       "   'parameters': {'function': 'scipy.signal.ricker',\n",
       "    'widths': 'np.arange(1,10)'},\n",
       "   'n_features': 1,\n",
       "   'use': 'yes',\n",
       "   'tag': 'eeg'},\n",
       "  'Wavelet standard deviation': {'complexity': 'linear',\n",
       "   'description': 'Computes CWT std value of each wavelet scale.',\n",
       "   'function': 'tsfel.wavelet_std',\n",
       "   'parameters': {'function': 'scipy.signal.ricker',\n",
       "    'widths': 'np.arange(1,10)'},\n",
       "   'n_features': 'widths',\n",
       "   'use': 'yes',\n",
       "   'tag': 'eeg'},\n",
       "  'Wavelet variance': {'complexity': 'linear',\n",
       "   'description': 'Computes CWT variance value of each wavelet scale.',\n",
       "   'function': 'tsfel.wavelet_var',\n",
       "   'parameters': {'function': 'scipy.signal.ricker',\n",
       "    'widths': 'np.arange(1,10)'},\n",
       "   'n_features': 'widths',\n",
       "   'use': 'yes',\n",
       "   'tag': 'eeg'}}}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tsfel.get_features_by_domain(\"spectral\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c613bdc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:11:22.103765Z",
     "iopub.status.busy": "2024-06-12T12:11:22.103349Z",
     "iopub.status.idle": "2024-06-12T12:11:22.109997Z",
     "shell.execute_reply": "2024-06-12T12:11:22.108563Z"
    },
    "papermill": {
     "duration": 0.030927,
     "end_time": "2024-06-12T12:11:22.112678",
     "exception": false,
     "start_time": "2024-06-12T12:11:22.081751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "d1 = {'a':[1,2,3]}\n",
    "d2 = {'b':[4,5,6]}\n",
    "d1.update(d2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "53ba6bd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-12T12:11:22.155464Z",
     "iopub.status.busy": "2024-06-12T12:11:22.155034Z",
     "iopub.status.idle": "2024-06-12T12:11:22.162629Z",
     "shell.execute_reply": "2024-06-12T12:11:22.161316Z"
    },
    "papermill": {
     "duration": 0.032321,
     "end_time": "2024-06-12T12:11:22.165090",
     "exception": false,
     "start_time": "2024-06-12T12:11:22.132769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a': [1, 2, 3], 'b': [4, 5, 6]}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef1b54c8",
   "metadata": {
    "papermill": {
     "duration": 0.019957,
     "end_time": "2024-06-12T12:11:22.205184",
     "exception": false,
     "start_time": "2024-06-12T12:11:22.185227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4983801,
     "sourceId": 8590469,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 678.66028,
   "end_time": "2024-06-12T12:11:23.252493",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-12T12:00:04.592213",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "08bfd94da7bd42d78f088a6228e8715d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "0967c4a68728437497e4cddf9fcef5ce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "145a838f02a84088bcd2e3126d27645e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_d5478e681da241bba9c7555b89dc4acb",
       "placeholder": "​",
       "style": "IPY_MODEL_abc3bc3646ee47fc9928e6dde849d0e5",
       "value": "100%"
      }
     },
     "23305111a3ad4833b1ec2a99d29f617e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3ffd4c2463f2483fb7af4aa2d00540a2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_d3dbb4bc6b584608b45387fc8a4a92b0",
       "max": 17.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_08bfd94da7bd42d78f088a6228e8715d",
       "value": 17.0
      }
     },
     "4080b89218604b46a730dd6dd814c9f2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_99f107a864774a84826ff98ca2745132",
        "IPY_MODEL_e56500ac131847c1b79c82ec9d28a4ee",
        "IPY_MODEL_a461684c9b0a48f285abec786ef780b9"
       ],
       "layout": "IPY_MODEL_cb7f7aae349e4cd8ad6db5283cbfe7f2"
      }
     },
     "4c6a14d370d0434cb79d27884318a00d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4ddb6e3c2d3f4c379a84d22280d443bb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "4de42cbb304848a3ba9b87011cf16a1d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "52b23ae47be1476884d526b14933cb3c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_88c712628de24c4d918cfa5f3d4054b0",
       "placeholder": "​",
       "style": "IPY_MODEL_eabca9f15a434eb8967298c95449b52d",
       "value": "100%"
      }
     },
     "5c59e93e07104fca8c417dfe7d1d22e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5ee76a081df244239d95db499652fa8c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "65fe5b6f2a5e48eea2cf83b3ec88318f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6d14441b28284bd882671703801a62cc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "70dd6118db1549e49874b071d72d103a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "74909d8589034df3964f9215587e0afa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7b2d6364f21b43f4a7b32450091793f6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_ef589baa084e49a1804748fdaaac43ff",
       "max": 17.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5c59e93e07104fca8c417dfe7d1d22e3",
       "value": 17.0
      }
     },
     "82218ab2f21344898fb0f369f73937da": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9fe7fb98cefb4cc896cc0d68e758f354",
        "IPY_MODEL_3ffd4c2463f2483fb7af4aa2d00540a2",
        "IPY_MODEL_df7d9acc8f634762ae6f10588332e70c"
       ],
       "layout": "IPY_MODEL_23305111a3ad4833b1ec2a99d29f617e"
      }
     },
     "8505c8d696dc486f9df2140adce041b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "88c712628de24c4d918cfa5f3d4054b0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8b13552fea9844509ddd715ee1c653e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "8c41890f3d4b414a8671632a673c6180": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "969905195f2a452a9824cd032f8d97e2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "99f107a864774a84826ff98ca2745132": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_8c41890f3d4b414a8671632a673c6180",
       "placeholder": "​",
       "style": "IPY_MODEL_70dd6118db1549e49874b071d72d103a",
       "value": "100%"
      }
     },
     "9d02666d69c8453d90afb3733aeb0ba0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9fe7fb98cefb4cc896cc0d68e758f354": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_9d02666d69c8453d90afb3733aeb0ba0",
       "placeholder": "​",
       "style": "IPY_MODEL_4ddb6e3c2d3f4c379a84d22280d443bb",
       "value": "100%"
      }
     },
     "a232faf22b284c2c81ac046c9ac45140": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_0967c4a68728437497e4cddf9fcef5ce",
       "placeholder": "​",
       "style": "IPY_MODEL_c2503b8a969c49b898f2c5c22ff298c4",
       "value": " 17/17 [00:00&lt;00:00,  7.42it/s]"
      }
     },
     "a461684c9b0a48f285abec786ef780b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_4c6a14d370d0434cb79d27884318a00d",
       "placeholder": "​",
       "style": "IPY_MODEL_aaa6a113b50141d59a2a930f75055bfe",
       "value": " 17/17 [03:34&lt;00:00, 12.33s/it]"
      }
     },
     "a49f9784f3f74ad090fdd7172b1fdabf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_a75eef16eeae4a59b58ffe02aa259d63",
       "placeholder": "​",
       "style": "IPY_MODEL_8505c8d696dc486f9df2140adce041b2",
       "value": " 17/17 [03:41&lt;00:00, 13.43s/it]"
      }
     },
     "a75eef16eeae4a59b58ffe02aa259d63": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aaa6a113b50141d59a2a930f75055bfe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "abc3bc3646ee47fc9928e6dde849d0e5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "b3465231771d417392cf70f28fb68768": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_52b23ae47be1476884d526b14933cb3c",
        "IPY_MODEL_ea6dfae2a0684ab69f067b00522982c9",
        "IPY_MODEL_a49f9784f3f74ad090fdd7172b1fdabf"
       ],
       "layout": "IPY_MODEL_4de42cbb304848a3ba9b87011cf16a1d"
      }
     },
     "c2503b8a969c49b898f2c5c22ff298c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "c349b405d70c44a6af59856f54774b5f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cb7f7aae349e4cd8ad6db5283cbfe7f2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d3dbb4bc6b584608b45387fc8a4a92b0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d5478e681da241bba9c7555b89dc4acb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dbb0f3b0b40c42ce98e49208625bf7c9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_145a838f02a84088bcd2e3126d27645e",
        "IPY_MODEL_7b2d6364f21b43f4a7b32450091793f6",
        "IPY_MODEL_a232faf22b284c2c81ac046c9ac45140"
       ],
       "layout": "IPY_MODEL_969905195f2a452a9824cd032f8d97e2"
      }
     },
     "df7d9acc8f634762ae6f10588332e70c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5ee76a081df244239d95db499652fa8c",
       "placeholder": "​",
       "style": "IPY_MODEL_8b13552fea9844509ddd715ee1c653e4",
       "value": " 17/17 [03:34&lt;00:00, 12.52s/it]"
      }
     },
     "e56500ac131847c1b79c82ec9d28a4ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_65fe5b6f2a5e48eea2cf83b3ec88318f",
       "max": 17.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c349b405d70c44a6af59856f54774b5f",
       "value": 17.0
      }
     },
     "ea6dfae2a0684ab69f067b00522982c9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_6d14441b28284bd882671703801a62cc",
       "max": 17.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_74909d8589034df3964f9215587e0afa",
       "value": 17.0
      }
     },
     "eabca9f15a434eb8967298c95449b52d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "ef589baa084e49a1804748fdaaac43ff": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
